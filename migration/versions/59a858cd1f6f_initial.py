"""initial

Revision ID: 59a858cd1f6f
Revises: 
Create Date: 2025-09-22 00:33:26.168560

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from datetime import datetime

# revision identifiers, used by Alembic.
revision: str = '59a858cd1f6f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
                    sa.Column('id', sa.BigInteger(), nullable=False),
                    sa.Column('user_name', sa.String(
                        length=128), nullable=True),
                    sa.Column('first_name', sa.String(
                        length=128), nullable=True),
                    sa.Column('last_name', sa.String(
                        length=128), nullable=True),
                    sa.Column('created_at', sa.DateTime(timezone=True),
                              server_default=sa.FetchedValue(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True),
                              server_default=sa.FetchedValue(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    prompts = op.create_table('prompts',
                              sa.Column('id', sa.Integer(), nullable=False),
                              sa.Column('user_id', sa.BigInteger(),
                                        nullable=True),
                              sa.Column('name', sa.String(
                                  length=128), nullable=False),
                              sa.Column('text', sa.Text(), nullable=False),
                              sa.Column('created_at', sa.DateTime(timezone=True),
                                        server_default=sa.FetchedValue(), nullable=False),
                              sa.Column('updated_at', sa.DateTime(timezone=True),
                                        server_default=sa.FetchedValue(), nullable=False),
                              sa.ForeignKeyConstraint(
                                  ['user_id'], ['users.id'], ondelete='CASCADE'),
                              sa.PrimaryKeyConstraint('id')
                              )
    op.create_table('subscriptions',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.BigInteger(), nullable=False),
                    sa.Column('seconds_left', sa.Integer(), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True),
                              server_default=sa.FetchedValue(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True),
                              server_default=sa.FetchedValue(), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['user_id'], ['users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('transcriptions',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.BigInteger(), nullable=False),
                    sa.Column('chat_id', sa.BigInteger(), nullable=False),
                    sa.Column('message_id', sa.BigInteger(), nullable=False),
                    sa.Column('prompt_id', sa.Integer(), nullable=False),
                    sa.Column('text', sa.Text(), nullable=False),
                    sa.Column('created_at', sa.DateTime(timezone=True),
                              server_default=sa.FetchedValue(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(timezone=True),
                              server_default=sa.FetchedValue(), nullable=False),
                    sa.ForeignKeyConstraint(['prompt_id'], ['prompts.id'], ),
                    sa.ForeignKeyConstraint(
                        ['user_id'], ['users.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id')
                    )

    op.bulk_insert(prompts, [dict(
        id=1, name="summary", created_at=datetime.now(), updated_at=datetime.now(), text='''Шаблон для создания summary:
Тема обсуждения: <text>

- Задача: <text>
- Описание / Концепция / Детали задачи: <text>
- Сроки: <data> + <text> для доп. комментариев / уточнений по срокам
- Материалы (optinal): <text>
.
.

- Задача: <text>
- Описание / Концепция / Детали задачи: <text>
- Сроки: <data>+ <text> для доп. комментариев / уточнений по срокам
- Материалы (optinal): <text>
'''
    ), dict(id=2, name="short_summary", created_at=datetime.now(), updated_at=datetime.now(), text='''Шаблон для создания summary:
Тема обсуждения: <text>

- Задача: <text>
- Описание / Концепция / Детали задачи: <text>
- Сроки: <data> + <text> для доп. комментариев / уточнений по срокам
- Материалы (optinal): <text>
.
.

- Задача: <text>
- Описание / Концепция / Детали задачи: <text>
- Сроки: <data>+ <text> для доп. комментариев / уточнений по срокам
- Материалы (optinal): <text>

Только давай покороче
'''), dict(id=3, name="protocol", created_at=datetime.now(), updated_at=datetime.now(), text='''Проанализируй предоставленный текст совещания или статусной встречи и создай по нему структурированное саммари.

Инструкция по анализу:
1.  Раздели весь текст на логические блоки по темам/обсуждаемым вопросам. Не используй в саммари номера задач из исходного текста.
2.  Выдели ключевые пункты по каждому блоку: что было сделано, что договорились, что необходимо сделать, кто ответственный и какие сроки.
3.  Сохрани все технические и бизнес-детали, решения и планируемые действия.
4.  Сохрани имена ответственных и сроки, если они указаны.
5.  Излагай информацию кратко, но полно, используя ясный и деловой язык.
6.  Если в тексте есть вопросы или пункты, помеченные как спорные (например, "нужен ли этот пункт?"), включи их в саммари с пометкой "[На уточнение]".

Требования к формату ответа:
Не используй заголовки "Саммари" или "Итоги". Просто начни с первого пункта.
Для каждого логического блока используй структуру:
-   [Ключевое действие/тема]: [Суть]. – [Ответственный] ([Срок, если есть]).
-   [Договорённость/Решение]: [Суть]. – [Участники/Ответственные].
-   [План]: [Что запланировано]. – [Ответственный] ([Срок, если есть]).
-   [Требование/Необходимо]: [Что требуется]. – [Ответственный].
-   [Вопрос на уточнение]: [Суть вопроса]. – [Кому адресован].
''')])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transcriptions')
    op.drop_table('subscriptions')
    op.drop_table('prompts')
    op.drop_table('users')
    # ### end Alembic commands ###
